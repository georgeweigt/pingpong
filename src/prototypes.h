void aes128ctr_setup(uint32_t *expanded_key, uint8_t *key, uint8_t *iv);
void aes128ctr_encrypt(uint32_t *expanded_key, uint8_t *buf, int len);
int mul(int a, int b);
void aes128_init();
void aes128_expand_key(uint8_t *key, uint32_t *w, uint32_t *v);
void aes128_encrypt_block(uint32_t *w, uint8_t *in, uint8_t *out);
void aes128_decrypt_block(uint32_t *v, uint8_t *in, uint8_t *out);
void aes256ctr_setup(uint32_t *state, uint8_t *key, uint8_t *iv);
void aes256ctr_encrypt(uint32_t *state, uint8_t *buf, int len);
int aes256_mul(int a, int b);
void aes256_init();
void aes256_expand_key(uint32_t *w, uint8_t *key);
void aes256_encrypt_block(uint32_t *w, uint8_t *in, uint8_t *out);
int aes256_test_encrypt(void);
int decap(uint8_t *buf, int len, uint8_t *private_key);
uint32_t * ec_modinv(uint32_t *a, uint32_t *p);
uint32_t * ec_modinv_v1(uint32_t *a, uint32_t *p);
uint32_t * ec_modinv_v2(uint32_t *a, uint32_t *p);
uint32_t * ec_modinv_v3(uint32_t *a, uint32_t *p);
void ec_projectify(struct point *S);
int ec_affinify(struct point *S, uint32_t *p);
void ec_double(struct point *R, struct point *S, uint32_t *p);
void ec_double_v2k1(struct point *R, struct point *S, uint32_t *p);
void ec_double_v2r1(struct point *R, struct point *S, uint32_t *p, uint32_t *a);
void ec_double_v1(struct point *R, struct point *S, uint32_t *p);
void ec_add_xyz(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_add(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_sub(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_mult(struct point *R, uint32_t *d, struct point *S, uint32_t *p);
void ec_mult(struct point *R, uint32_t *d, struct point *S, uint32_t *p);
int ec_get_msbit_index(uint32_t *u);
int ec_get_bit(uint32_t *u, int k);
int ec_F(int t);
void ec_twin_mult(struct point *R, uint32_t *d0, struct point *S, uint32_t *d1, struct point *T, uint32_t *p);
void ec_free_xyz(struct point *u);
uint32_t * ec_add(uint32_t *u, uint32_t *v);
uint32_t * ec_sub(uint32_t *u, uint32_t *v);
uint32_t * ec_mul(uint32_t *u, uint32_t *v);
uint32_t * ec_div(uint32_t *u, uint32_t *v);
void ec_mod(uint32_t *u, uint32_t *v);
void ec_mod_v1(uint32_t *u, uint32_t *v);
void ec_mod_v2(uint32_t *u, uint32_t *v);
uint32_t * ec_pow(uint32_t *u, uint32_t *v);
void ec_shr(uint32_t *u);
int ec_cmp(uint32_t *u, uint32_t *v);
int ec_equal(uint32_t *u, uint32_t v);
uint32_t * ec_int(int k);
uint32_t * ec_new(int n);
void ec_free(uint32_t *u);
uint32_t * ec_dup(uint32_t *u);
void ec_norm(uint32_t *u);
uint32_t * ec_hexstr_to_bignum(char *s);
uint32_t * ec_buf_to_bignum(uint8_t *buf, int len);
void ec_init(void);
void ec_ecdh(uint8_t *shared_secret, uint8_t *private_key, uint8_t *public_key);
void ec_genkey(uint8_t *private_key, uint8_t *public_key);
void ec_pubkey(uint8_t *public_key, uint8_t *private_key);
void ec_sign(uint8_t *rbuf, uint8_t *sbuf, uint8_t *hash, uint8_t *private_key);
int ec_verify(uint8_t *hash, uint8_t *rbuf, uint8_t *sbuf, uint8_t *public_key_x, uint8_t *public_key_y);
void encap(uint8_t *buf, int len, struct node *p);
int enlength(struct atom *p);
int sublength(struct atom *p);
int padlength(struct atom *p, int sublen);
void init(void);
void read_account(struct account *p, char *filename);
char * read_file(char *filename);
void print_account(struct account *p);
void kdf(uint8_t *aes_key, uint8_t *hmac_key, uint8_t *shared_secret);
uint8_t * theta(uint8_t *A);
uint8_t * rho(uint8_t *A);
uint8_t * pi(uint8_t *A);
uint8_t * chi(uint8_t *A);
uint8_t rc(int t);
uint8_t * iota(uint8_t *A, int ir);
uint8_t * Rnd(uint8_t *A, int ir);
void Keccak(uint8_t *S);
uint8_t * sponge(uint8_t *N, int len);
void keccak256(uint8_t *outbuf, uint8_t *inbuf, int inbuflen);
char * keccak256str(uint8_t *buf, int len);
void test_keccak256(void);
void keccak256_init(struct mac *p);
void keccak256_update(struct mac *p, uint8_t *inbuf, int len);
void keccak256_digest(struct mac *p, uint8_t *outbuf);
void list(int n);
void push(struct atom *p);
struct atom * pop(void);
void pop_all(int n);
void push_string(uint8_t *string, int length);
void push_number(uint64_t n);
struct atom * alloc_atom(int string_length);
void free_list(struct atom *p);
int compare_lists(struct atom *p, struct atom *q);
void print_list(struct atom *p);
void print_list_nib(struct atom *p, int level);
void macs(struct node *p);
int main(int argc, char *argv[]);
void nib(void);
int rdecode(uint8_t *buf, int length);
int rdecode_relax(uint8_t *buf, int length);
int rdecode_nib(uint8_t *buf, int length);
int rdecode_list(uint8_t *buf, int length);
int recv_ack(struct node *p, uint8_t *buf, int len);
int recv_ack_data(struct node *p, struct atom *q);
int recv_auth(struct node *p, uint8_t *buf, int len);
int recv_auth_data(struct node *p, struct atom *q);
int rencode(uint8_t *buf, int len, struct atom *p);
int rencode_nib(uint8_t *buf, struct atom *p);
int rencode_list(uint8_t *buf, struct atom *p);
int rencode_string(uint8_t *buf, struct atom *p);
void send_ack(struct node *p);
struct atom * ack_body(struct node *p);
void send_auth(struct node *p);
struct atom * auth_body(struct node *p);
void session(struct node *p, int initiator);
void hmac_sha256(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha256(uint8_t *buf, int len, uint8_t *out);
void sha256_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha256_hash_block(uint8_t *buf, uint32_t *hash);
void test_sha256(void);
void sign(uint8_t *msg, int msglen, uint8_t *private_key, uint8_t *public_key);
void test_sign(void);
void sim(void);
uint8_t * receive(int fd, int *plen);
void wait_for_pollin(int fd);
int start_listening(int port);
int client_connect(char *ipaddr, int portnumber);
int server_connect(int listen_fd);
void test(void);
int test_public_key(char *public_key_x, char *public_key_y);
void test_aes128(void);
void test_aes256(void);
void test_rencode(void);
void test_rdecode(void);
void test_genkey(void);
int test_public_key_secp256k1(uint32_t *x, uint32_t *y);
int test_public_key_secp256r1(uint32_t *x, uint32_t *y);
void test_ecdh(void);
void test_kdf(void);
void test_hmac(void);
void test_pubkey(void);
void test_decrypt(void);
void printmem(uint8_t *mem, int n);
void hextobin(uint8_t *buf, int len, char *str);
