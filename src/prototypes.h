uint8_t * create_auth_message(struct session *s, int *plen);
int decode(uint8_t *buf, int length);
int decode_nib(uint8_t *buf, int length);
void decode_list(uint8_t *buf, int length);
int decode_check(uint8_t *buf, int length);
int decode_check_list(uint8_t *buf, int length);
void test_decode(void);
uint32_t * ec_modinv(uint32_t *a, uint32_t *p);
uint32_t * ec_modinv_v1(uint32_t *a, uint32_t *p);
uint32_t * ec_modinv_v2(uint32_t *a, uint32_t *p);
uint32_t * ec_modinv_v3(uint32_t *a, uint32_t *p);
void ec_projectify(struct point *S);
int ec_affinify(struct point *S, uint32_t *p);
void ec_double(struct point *R, struct point *S, uint32_t *p);
void ec_double_v2k1(struct point *R, struct point *S, uint32_t *p);
void ec_double_v2r1(struct point *R, struct point *S, uint32_t *p, uint32_t *a);
void ec_double_v1(struct point *R, struct point *S, uint32_t *p);
void ec_add_xyz(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_add(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_sub(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_mult(struct point *R, uint32_t *d, struct point *S, uint32_t *p);
void ec_mult(struct point *R, uint32_t *d, struct point *S, uint32_t *p);
int ec_get_msbit_index(uint32_t *u);
int ec_get_bit(uint32_t *u, int k);
int ec_F(int t);
void ec_twin_mult(struct point *R, uint32_t *d0, struct point *S, uint32_t *d1, struct point *T, uint32_t *p);
void ec_free_xyz(struct point *u);
uint32_t * ec_add(uint32_t *u, uint32_t *v);
uint32_t * ec_sub(uint32_t *u, uint32_t *v);
uint32_t * ec_mul(uint32_t *u, uint32_t *v);
uint32_t * ec_div(uint32_t *u, uint32_t *v);
void ec_mod(uint32_t *u, uint32_t *v);
void ec_mod_v1(uint32_t *u, uint32_t *v);
void ec_mod_v2(uint32_t *u, uint32_t *v);
uint32_t * ec_pow(uint32_t *u, uint32_t *v);
void ec_shr(uint32_t *u);
int ec_cmp(uint32_t *u, uint32_t *v);
int ec_equal(uint32_t *u, uint32_t v);
uint32_t * ec_int(int k);
uint32_t * ec_new(int n);
void ec_free(uint32_t *u);
uint32_t * ec_dup(uint32_t *u);
void ec_norm(uint32_t *u);
uint32_t * ec_hexstr_to_bignum(char *s);
uint32_t * ec_buf_to_bignum(uint8_t *buf, int len);
void test_ec();
void test_ec_full_add();
void test_ec_full_sub();
void test_ec_double();
void test_ec_mult();
void test_ec_twin_mult();
int test_public_key_secp256k1(uint32_t *x, uint32_t *y);
int test_public_key_secp256r1(uint32_t *x, uint32_t *y);
void ec_init(void);
void ec_genkey(uint8_t *private_key, uint8_t *public_key_x, uint8_t *public_key_y);
void ec_public_key(uint8_t *public_key_x, uint8_t *public_key_y, uint8_t *private_key);
void test_ec_genkey(void);
void ec_sign(uint8_t *rbuf, uint8_t *sbuf, uint8_t *hash, uint8_t *private_key);
int ec_verify(uint8_t *hash, uint8_t *rbuf, uint8_t *sbuf, uint8_t *public_key_x, uint8_t *public_key_y);
int encode(uint8_t *buf, int len, struct atom *p);
int encode_nib(uint8_t *buf, struct atom *p);
int encode_list(uint8_t *buf, struct atom *p);
int encode_string(uint8_t *buf, struct atom *p);
void test_encode(void);
uint8_t * encryptmsg(struct session *s, uint8_t *msg, int len, int *plen);
int enlength(struct atom *p);
int sublength(struct atom *p);
int padlength(struct atom *p, int sublen);
void generate_ephemeral_keyset(struct session *s);
void init(void);
void read_account(struct account *p, char *filename);
char * read_file(char *filename);
void print_account(struct account *p);
uint8_t * theta(uint8_t *A);
uint8_t * rho(uint8_t *A);
uint8_t * pi(uint8_t *A);
uint8_t * chi(uint8_t *A);
uint8_t rc(int t);
uint8_t * iota(uint8_t *A, int ir);
uint8_t * Rnd(uint8_t *A, int ir);
void Keccak(uint8_t *S);
uint8_t * sponge(uint8_t *N, int len);
void keccak256(uint8_t *outbuf, uint8_t *inbuf, int inbuflen);
char * keccak256str(uint8_t *buf, int len);
void test_keccak256(void);
void key_derivation_function(struct session *s);
void list(int n);
void push(struct atom *p);
struct atom * pop(void);
void push_string(uint8_t *string, int length);
void push_number(uint64_t n);
struct atom * alloc_atom(int string_length);
void free_list(struct atom *p);
int compare_lists(struct atom *p, struct atom *q);
int main();
void stub(void);
int start_listening(int port);
int client_connect(char *ipaddr, int portnumber);
int server_connect(int listen_fd);
void nib(void);
void wait_for_pollin(int fd);
void selftest(void);
int test_public_key(char *public_key_x, char *public_key_y);
void send_enr_request(int fd, char *dst_ip, int dst_port, struct account *acct);
uint8_t * enr_request_payload(int *plen, struct account *acct);
struct atom * enr_request_data(void);
void send_ping(int fd, char *src_ip, char *dst_ip, int src_port, int dst_port, struct account *acct);
uint8_t * ping_payload(char *src_ip, char *dst_ip, int src_port, int dst_port, int *plen, struct account *acct);
struct atom * ping_data(char *src_ip, char *dst_ip, int src_port, int dst_port);
void test_ping_payload(struct account *acct);
void hmac_sha256(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha256(uint8_t *buf, int len, uint8_t *out);
void sha256_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha256_hash_block(uint8_t *buf, uint32_t *hash);
void test_sha256(void);
void sign(uint8_t *sig, uint8_t *msg, int msglen, struct account *acct);
void test_sign(struct account *acct);
