uint32_t * ec_modinv(uint32_t *c, uint32_t *p);
void ec_projectify(struct point *S);
void ec_affinify(struct point *S, uint32_t *p);
void ec_double(struct point *R, struct point *S, uint32_t *p);
void ec_add_xyz(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_add(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_sub(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_mult(struct point *R, uint32_t *d, struct point *S, uint32_t *p);
int ec_get_msbit_index(uint32_t *u);
int ec_get_bit(uint32_t *u, int k);
int ec_F(int t);
void ec_twin_mult(struct point *R, uint32_t *d0, struct point *S, uint32_t *d1, struct point *T, uint32_t *p);
void ec_free_xyz(struct point *u);
uint32_t * ec_add(uint32_t *u, uint32_t *v);
uint32_t * ec_sub(uint32_t *u, uint32_t *v);
uint32_t * ec_mul(uint32_t *u, uint32_t *v);
uint32_t * ec_div(uint32_t *u, uint32_t *v);
void ec_mod(uint32_t *u, uint32_t *v);
uint32_t * ec_pow(uint32_t *u, uint32_t *v);
void ec_shr(uint32_t *u);
int ec_cmp(uint32_t *u, uint32_t *v);
int ec_equal(uint32_t *u, uint32_t v);
uint32_t * ec_int(int k);
uint32_t * ec_new(int n);
void ec_free(uint32_t *u);
uint32_t * ec_dup(uint32_t *u);
void ec_norm(uint32_t *u);
uint32_t * ec_hexstr_to_bignum(char *s);
uint32_t * ec_buf_to_bignum(uint8_t *buf, int len);
void test_ec();
void test_ec_full_add();
void test_ec_full_sub();
void test_ec_double();
void test_ec_mult();
void test_ec_twin_mult();
void ecdsa_init(void);
int ecdhe256_verify_hash(uint8_t *hash, int hashlen, uint8_t *rr, int r_length, uint8_t *ss, int s_length, uint8_t *xx, uint8_t *yy);
int ecdsa256_verify_f(uint32_t *h, uint32_t *r, uint32_t *s, uint32_t *x, uint32_t *y);
void ecdsa256_sign_f(uint32_t *h, uint32_t *d, uint8_t *sig);
int ecdhe384_verify_hash(uint8_t *hash, int hashlen, uint8_t *rr, int r_length, uint8_t *ss, int s_length, uint8_t *xx, uint8_t *yy);
int ecdsa384_verify_f(uint32_t *h, uint32_t *r, uint32_t *s, uint32_t *x, uint32_t *y);
void ecdsa384_sign_f(uint32_t *h, uint32_t *d, uint8_t *sig);
uint8_t * theta(uint8_t *A);
uint8_t * rho(uint8_t *A);
uint8_t * pi(uint8_t *A);
uint8_t * chi(uint8_t *A);
uint8_t rc(int t);
uint8_t * iota(uint8_t *A, int ir);
uint8_t * Rnd(uint8_t *A, int ir);
void Keccak(uint8_t *S);
uint8_t * sponge(uint8_t *N, int len);
char * keccak256(uint8_t *buf, int len);
void test_keccak256(void);
int main();
void stub(void);
void push_ping_packet_data(uint32_t sender_ip, uint32_t recipient_ip);
int rlp_encode(uint8_t *outbuf, struct atom *p);
int rlp_encode_list(uint8_t *outbuf, struct atom *p);
int rlp_encode_string(uint8_t *outbuf, struct atom *p);
int rlp_length(struct atom *p, int level);
void rlp_decode(struct atom *p);
void selftest(void);
void test_boot_key(void);
void push(struct atom *p);
struct atom * pop(void);
void push_number(uint64_t n);
void list(int n);
struct atom * alloc_atom(int string_length);
